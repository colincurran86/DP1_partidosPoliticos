/*<APPLET code="RecogChar"
                width="1270"
                height="680">
        </APPLET>
*/

package OCR;

import java.applet.Applet;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.*;

import javax.imageio.ImageIO;
import javax.swing.*;

/* This class implements an applet that allows the user to test out
   basic character recognition functions.*/

public class RecogChar extends JFrame
{
	//5*7 matrix
  	static final int DOWNSAMPLE_WIDTH = 6;
  	static final int DOWNSAMPLE_HEIGHT = 8;
  	Vector sampleList = new Vector();
  	DrawLetters entry;
  	Sample sample;
  	Kalgo net;
  	private UIManager.LookAndFeelInfo looks[]; 

  	public static final String HANDWRITING[] = {
  		"0:001111111101101101000000100000110000110001011111",
  		"0:011111011011110001100001100001100001110011110011",
  		"0:110000111110001001001001110000111000001000001100",
  		"0:000111001100001000111000110000110000111100001111",
  		"0:001111011101110001110001100001100001110001110001",
  		"0:011111111000110000100000110000110000110000111111",
  		"0:111110110111100011100011100011100001110011110011",
  		"0:111110111111111111111111110011111011111011011111",
  		"0:111111111111111001101001100000110001111011111111",
  		"0:011111111111111111111001111001111001111101011111",
  		"0:011111011111111111111011110011110011111111111111",
  		"0:011111111111111101111001110001110011111111111111",
  		"0:111111111111111001110001110001000001110111111111",
  		"0:011111111111111111111001110001111001111011111111",
  		"0:001111011111111001111001111001111001111001011111",
  		"0:011111011111111101111001110001110001111011111111",
  		
  		"1:000001000111111111000001000001000111001110001000",
  		"1:111111111111111111111111111111111111111111111111",
  		"1:001111111000111001001001000001000011000010000010",
  		"1:000000000011001111111111110011110011000011000000",
  		"1:000111001110111011000000000001000001000001000011",
  		"1:000000000001001111110001000001000001000001000001",
  		"1:000001000011111110000010000010000110000100000110",
  		"1:000000000111000111000111111111111000111000111000",
  		"1:000000000000000000000000111111111111111111111111",
  		"1:000001001111110000000000000000000000000000000000",
  		"1:111111111111111111111111111111111111111111111111",
  		"1:000111000111000111000111000111111111111000111000",
  		"1:111111111111000000000000000000000000000000000000",
  		"1:000111000111000111000111000111000111000111111111",
  		"1:000001000011000111111101000001000011000111001110",
  		"1:011111111111111111110111000111001110001110001110",
  		"1:000011001111111111110011000111000110000110000111",
  		"1:111111111111111111000111000111000111000111111111",
  		"1:000111000111111111111111111111111111111111111111",
  		

"1:000111000111000111001111111110111110011110011110",
"1:000011000111011111111011100011000011000110000110",
"1:000111001111011111111111110111001110001100011100",
"1:001111111111111011000011000011000111000111000111",
"1:000011000011000111001111001111011110111100111100",

    	  "2:111100100100100100000100000100001100011000111111",
      	  "2:111100111100000100001100011100111000110000111111",
  		"2:111111110011100011100011000111001100011100111011",
  		"2:111111110011000011000011000111000110011000011000",
  		"2:111110000110000110000110001100011100111000110000",
  		"2:111100111100001100001100001000001000011000010000",
  		"2:111110100110100110000110000110001100111000110000",
  		"2:111110100111000011000111001110011100111000111111",
  		"2:001110000010000010000110001100111000111110000001",
  		"2:111110111110000100000100001000011000111000110001",
  		"2:111100111100001100011100111000110000100000000001",
  		"2:111100101100001100001100001000011000010000011100",
  		"2:111100101100001100001100011100011000110000111100",
  		"2:111100100100100100000100001100011000111000111111",
  		"2:111111111011000011000011000110011100011000111000",
  		"2:111111111011000011000111001110001100011000110001",
  		"2:111111110011000011000011000110001100111000111111",
  		"2:111110110110000110000100001100001000011000110011",

"2:111111111111110111000111000111001110111100111111",
"2:111111111111111111001111011110111100111111111111",
"2:011111011111111011110011000111001110011100111111",
"2:111111111111110111000111001110111100111100111111",
"2:111000111100111100111000111000110000100000111111",
"2:111111111111110001000111001111011110111000111111",
  		
  		"3:111111111001000001000111000111000011000001011111",
  		"3:011111000001000011001111111111111111000000000111",
  		"3:001111001100000001000111000011000000000001001111",
  		"3:000111000111001100001111000001000001000111111100",
  		"3:111111110001000011011111000001000000000001001111",
  		"3:111111000000000001000001000001000000000000000001",
  		"3:011110000110001110011100111111000001000111011110",
  		"3:011111111011100001000011000011000011000011000110",
  		"3:011111000001000011000111000001000000000001000111",
  		"3:111111000000000011000010000001000000000000000001",
  		"3:001111000000000000000001000001000000000001000011",
  		"3:111111110000110000000111000110000110000001000111",
  		"3:111111000111011110011100000111000001000011000111",
  		"3:111111000000000001000111000111000001000000111111",
  		"3:111111111001000001001111001101000001000111011110",
  		"3:111111000110001110001111000000000000000000000111",
  		"3:111111000011000111001110111111100011000011001111",
  		"3:111110000110001110001111000001000001000011001111",
  		"3:000111000011000000000001000111000000000001000111",
  		"3:111111111101001111001111000111000011000001111111",
  		"3:111111111111000001000111001111000111000011111111",
  		"3:111111111011000111011111011110001111001111111111",
  		"3:111111111111110111001111001110000111111111111110",
  		"3:001111001111000011000111000111000111000011111111",
  		"3:001111001111001111001111001111000011000001111111",

"3:111111111011001111111110111110000111111011111111",
"3:001111000001000111011110011111000011001111111111",
"3:111110110111000110011110011111000011000111111110",
"3:011111011011001111011110011110001111000111111111",
"3:111111111011000111011110011111000011000011011111",
  		"4:001100011100011000110000111111000111001110001110",
  		"4:100001100011100011111110111100001100001100001100",
  		"4:111000000000000000000001111111000001000001000001",
  		"4:100000100001100011100111111011000011000011000011",
  		"4:111000110001100001111111000011000011000011000011",
  		"4:000111001110011100111001110001111111000011000011",
  		"4:001000111000110000110000001111000111000001000001",
  		"4:110000100000100011110111111110001110000110000110",
  		"4:100001100011100011111111111111000011000011000011",
  		"4:100001100001110011111111000011000011000011000011",
  		"4:110001110001100011110011011110001110001100001100",
  		"4:110000110000110000100000111111000001000011000011",
  		"4:110000110001110011111111110011000011000110000111",
  		"4:000001000011110011110011011110000010000010000010",
  		"4:100000100000100001111111000001000001000001000001",
  		"4:110001110011110011111111111111000011000011000011",
  		"4:011100111101111001111111111111000011000011000011",
  		"4:110000110011110011110111111111111111000111000111",
  		"4:011110111100110001111001111111000111000111000111",
  		"4:001110011110111101111111111111000111001111001111",

    	  "4:001000011000010000110100100100100101111111000100",
    	  "4:110001100000110000111111111111100000100000100001",
    	  "4:110110110110111110111111011111000011000011000011",  	
    	  "4:011001011001111011110011111111111110000110001110",
  		"5:111111110000100000111000001110000011000001000001",
  		"5:001111001000011110001111000001000001000111011110",
  		"5:001111011000011000001000001100000110000110101110",
  		"5:001111111100110000100111111101000000000001000111",
  		"5:000011111111111111110000110000111111000011111111",
  		"5:011111111110100000111110000110000110001110011100",
  		"5:111111111100100000111000001111000001000000100001",
  		"5:001111111100110000111100001111000011000011001111",
  		"5:001111011111110000110000001100000110000010001110",
  		"5:000111011100011000011110000011000011000011111111",
  		"5:000111000111001000001000001100000110000110000110",
  		"5:111111111100111100011111000111000001110011111111",
  		"5:011111111111111000111110000111000001110011111111",
  		"5:011111111111111000111000011100001110000110111110",
  		"5:011111111111111000110000011100001110000011111110",
  		"5:001111111111111000111100011100001110001110111100",
  		"5:000111001111001110000110100111100011000011011111",
  		
  		"6:000011000111011100011000110000110000111111100111",
  		"6:000011000110001100001000011000010011011111111111",
  		"6:000111001100001000111000110111111000110000110000",
  		"6:000011000110001100111000110011111110111000001111",
  		"6:001100011100011000110000110000110111111100110001",
  		"6:000110001100011000111000110011110111111101111011",
  		"6:001111011100111000110000100000111111110000110000",
  		"6:111110111111100011000001000001000001000011000111",
  		"6:001110011100111000110000100111111111110011111111",
  		"6:000011000111001100011000111000110000111111110011",
  		"6:000011000110001100001000110000110000110001001111",
  		"6:001111011100011000111000111111111000111111110000",
  		"6:011111111110111100111000111111111111111111111111",
  		"6:001111011111011100111100111111111111111001111111",
  		"6:001110001100011100011000111111111111111101111111",
  		"6:000011000111001111011110111100111111111111111111",
  		"6:001111011111011110111100111000111111111111111111",
  		"6:000110001110001100001000011011011111011111011111",
  		"6:011111111100111000111011111111111111111111111111",
  		"6:001111011111011100111100111111111110111111111111",
  		"6:100011100111001110001101001111001111001110001111",

    	  "6:011111110000100000111110110011100001110001011111",
    	  "6:000011001111011110111000111110111111110011111111",
  		
  		"7:111111100001000000000000000000001111000011000011",
  		
  		"7:111110000010000010000110000110111111000110000110",
  		"7:111100000110000110000110000110111111000110000110",
  		"7:111110000010000110000111111110001100001100001100",
  		"7:111100100110000010000010011111111111000110000100",
  		"7:111100111110000110000111111111000100000100001100",
  		"7:111110000111000001000000111111000011000111000110",
  		"7:111111000011000011000011111111111010000010000010",
  		"7:111100000100001100111111111110001000001000001000",
  		"7:111100000100000100001111111100001100001100001000",
  		"7:111000111100001100001100001111111000001000010000",
  		"7:111100111110000111000111000111111111000110001110",
  		"7:111100111110000011000011111111111111000111001110",
  		"7:111111111111111000000000000001011111011111000011",
  		"7:111111111111000001000000111111111111000011000111",
  		
  		"8:011111011001011111011110111110110110100110100110",
  		"8:111111110000110001111111001100111110110111111011",
  		"8:001111001000001111000111000100001110111010110010",
  		"8:111111110000001101000010000111001101111001111001",
  		"8:000111000100000111000010001111110001110001110001",
  		"8:011111111001011111011110011100110110000110101110",
  		"8:000111000111000111001110111111110011100111111110",
  		"8:111111111111110000111111000111000110111111110001",
  		"8:000111011111011111011110011111011111011100111001",
  		"8:101111101111111110011100011000111100111100101100",
  		"8:111111111111111111111111011110111111111110111110",
  		"8:001111011111011111001111111111111111110111111111",
  		"8:111111111111111111111110111110111110111110111110",
  		"8:111111111111111111111111111111110111111111111111",
  		"8:000111111111111111111111111110111110111110111110",
  		"8:000111011111011111001111111110111110111110111100",
  		

    	  "9:111111100001100001111111000001000001100001111111",
    	  "9:111111110011111111111111000110000110000110000110",
  		"9:011111111011100011111111000001000011000011001110",
  		"9:111111110011111111110001000011000011000111000110",
  		"9:001110111110110011111111000000000000000000000011",
  		"9:111111111111111101000000000000000000000000000001",
  		"9:111111110000110000001111000000000000000001000011",
  		"9:111111110000111111000000000001000011000110000100",

"9:111111111111110111111111110011000011000111011111",
"9:011111111111111111111111011101000001000011011111",
"9:111111111111110111111111111111000011001111111111",
"9:111111111111111111111111000011000111001111011110",
  		
  		
  	  "1:001100011100110100100100000100000100000100111111",

  	  "3:011110000100000100111000011100000100000101111110",
  	  "5:111111100000100000111111100001000001000001111111",
  	  "5:111111100000111111111111000001000001110011111111",
  	  "7:111111000001000011000010000110000100001100001000",
  	  "7:111111000001000001011111011111000011000011000011",
  	  "8:111111100001110011011110011110110011100001111111",
"2:111100111100000100001100011100111000110000111111",
"4:110001100000110000111111111111100000100000100001",
"5:111111100000111111111111000001000001110011111111",
"6:000011001111011110111000111110111111110011111111",
"7:111111000001000001011111011111000011000011000011",
"9:111111110011111111111111000110000110000110000110",
"1:000111000111111111111111000011000011000011000011",
"1:001100001100111100111100001100001100001100111111",
"3:111111000011000001111111111111000001000001111111",
"8:011111011111011001010001111111111011100001111111",
"0:111111111111110001110001100001100001100001111111",
"2:011110011110000110001110001100011000111111111111",
"2:001111011101000011000111001110011100110011111111",
"2:011110111111110111001110011110111100111011111111",
"2:111111110111000011000111011110111100111000111111",
"2:111100111100100110001100001100011000110000111111",
"4:011001011001111011110011111111111110000110001110",
"4:001101001101011011111011111111111110000110001110",
"4:111011110011110011110111111111111111000111000110",
"4:111000111011110011110011111111001111000011000011",
"4:001101011101111001110111111111000111000110000110",
"5:111111111011111000011000011100001100001100111100",
"5:011111111111110000110000011000011000001100111000",
"5:111111111111111000011100001110000110001110111100",
"5:011111111100110000111100011110000110011110111100",
"5:001111111111111000111000011100001110001110111100",
"6:111100111000110000110000111111111111111111111111",
"6:001111001110011100111000111111111111111111111111",
"6:000111001110001100011100111111111111111111111110",
"6:000111001110011000111000111111111111111111111110",
"6:011111111000110000110000111110111111111001111111",
"7:111110111110000110001111111111111110001100011100",
"7:111111111011000011000111111111001110011100011100",
"7:111100000110000110000110111111111110000110000110",
"7:111100001110000110000110011111011100001100011000",
"7:111100001110000110000110011111011100001100011000",
"8:011111111101111111011111011110111111110111111110",
"8:011111111101110011111111011110111111110011111111",
"8:001111011111011111001111001111111110111110111110",
"8:000111011111011111011111111100111100110110111100",
"8:000111011111011111011111111100111100110110111100",
"9:111110111111111111111111000011000011110111111110",
"9:111111111111110111111111111111000110001110011100",
"9:111111111111110111111111111111001110001110011100",
"9:111110111111111111111111111111000011000011011111",
"9:111111111111111111111111000011000111001110111100",
"5:011111110000110000111111111111000001000011111111",
"0:111111111111111011110001110001110001111111111111",
"0:011111011111000000110000110000110000111101111111",
"1:000111000111001111111111111001000001000001000001",
"1:000110001110111111111111110011000011000011000011",
"1:000011000011000111001101111011111011000011000011",
"1:001111001111111001110001110001000001000001000001",
"1:001111001111111111110011110011000011000011000011",
"1:000111001111111111111001110111110111000001000001",
"1:000111000111001111001110111000111000000000000000",
"1:000111001111001111111001110001000001000001000001",
"1:000011000011000111001101111101111001000001000001",
"1:000000000000000111111000000000000000000000000111",
"1:000111001111001111111001110001000001000001000001",
"1:000111000111001111001111111001110001000001000001",
"1:000111000111001111111001110001000001000001000001",
"1:001111011111011111111111110111110111000111000111",
"1:000111000111001101001101111001111001000001000001",
"1:000111000111001111111101111001110001000001000001",
"1:000011000011001111001100111100111100000000000000",
"1:000001000111111111111111110001000001000001000001",
"2:111111111111110110001110111100111000110000111111",
"2:111111111111110001110111001111001110111111111111",
"2:111111111111110001000011000110001100001100111111",
"2:111111000001000001000111001110001110111000111111",
"2:111111111111110001100011000011000111001110011111",
"2:111111111111000001000011000110000110001100001111",
"2:111111111111111111110111001110001110011100011111",
"2:001111001001111000000001000011000011000111001111",
"2:001110111111110011000011000110001110111000111111",
"2:111111110001110001000111000111001110111000111111",
"2:001111111001110001000111000110001110001000111111",
"2:111111111111000110001110001110001110111000111111",
"2:001111001111110011110011000110001110111100111111",
"2:001111001000111000111001000111001110001110111000",
"2:111111111111110001000001000111001110001000111111",
"2:111110111110111110101110011110011100111000111111",
"2:011111111111111111110111101111001110011100111111",
"2:111111111111110011000110001110001100111000111111",
"2:001111111001110001000110001110001110111001111111",
"2:111111111111110011000011000110001110111111111111",
"2:111111111111100111100111011110111100111000111111",
"2:111111111111110011000110000110000100001100001111",
"3:111110111110001110111110110111000011000011101111",
"3:111110111111000111000111001111001001000001111111",
"3:111110111110001110001110011111000011000111111111",
"3:111110111110001110001111000011000011000111111111",
"3:111100111100111100011111000011000011111111111110",
"3:111110111110101110011100011111000011000111111111",
"3:111100111100011100011111111111000001000011111111",
"3:011110011110001110011110011111000011111111111111",
"3:111110110010000010000011000111000000000001111011",
"3:111110011110001100001111000111000011000011100111",
"3:001000111110000110001110001111000001000000111111",
"3:001111001111011111001111001111000001000001111111",
"3:111000111000000111000111000000000000000000000000",
"3:111111110000000000000011000011000000000000000000",
"3:011110011110111110001111011111000011000011111111",
"3:001110011110111110011110011111000011110011111111",
"3:111111111111110110000110000111000001000001111111",
"3:001111011111111111011111001111000001000001111111",
"3:011110111110111110111111111111001111110011111111",
"3:111110111110111110011111011111000011111111111111",
"3:111110111110110110000110001111001001000001111011",
"4:011101111111111111111011111111111111001111000011",
"4:011110011111011101111001111111111111000011000011",
"4:111100111111111011110011111111111111000111000111",
"4:011101111011111011111111111111000011000011000011",
"4:011101111011111011111111111111000011000011000011",
"4:000100001100111001111111111111000011000001000001",
"4:000100001100111001111111111111000011000001000001",
"4:011001011001111011110011111111111111000011000011",
"4:001000001000111001110001111111111111000001000001",
"4:000110001110011101111011111111111111001111000111",
"4:000110001110011101111011111111111111001111000111",
"4:011001011001111011111011111111111111000011000011",
"4:011100011101111011111011110011111111111111000011",
"4:011100011101111011111011110011111111111111000011",
"4:011111011111011110011111111101111111000001000001",
"4:111110111110111101111111111011111111000011000011",
"4:111001111001110001110001111111111111000001000001",
"4:111001111001110001110001111111111111000001000001",
"4:001000111000110000110000000000000000111111000001",
"4:110000110001110001110001111111001111000001000001",
"4:001100011101111001110011111111000011000011000011",
"4:111001111001110011111111111111001111000011000011",
"4:011100011111011111111011111111111111000011000001",
"4:011111011011111011110011111111111111000011000011",
"4:011110011101111001111011111111000011000011000011",
"4:000011000111001111011101011111000001000001100001",
"4:000111001111111111100111000011000000000000000000",
"4:111001111001111011111111111111111111000011000001",
"4:001100111001111001110001111111111111000011000011",
"4:001100001100001100111000111001111111111101000000",
"4:111011111011110011111111111111000111000110000110",
"4:000010000010001100001101111111000001000011000011",
"4:111111111111111111111111111111111111000111000111",
"5:111110111110111110111111000111000011100011111111",
"5:111111111000110000111111000001000000000001001111",
"5:111111111111111111111111111111000000110000111100",
"5:000111001110111110111111000001000000000000001011",
"5:111111111111111111111111111111111111000000000111",
"5:001111111100110000111111111111000000000000000011",
"5:011111011011110111111111111111110001110001110011",
"6:001111001111111100111010110111111111111001001111",
"6:001110011110111000110000111111111110111111011111",
"7:111110111110000110000110111111111111001100001100",
"7:111111111111000001000001000001001111000011000001",
"7:111111111111000011000011011111011111000011000011",
"7:111111111111000111000011111111111111000111000111",
"7:111110111111000111000110111111001110001110001110",
"7:111110111111110111000111011111011111000111000110",
"7:111111111111000011000011111111111111000111000111",
"7:111111001111000011000011111111111111001011000011",
"7:111110111110001110111111111111001110011100011100",
"7:111111011111000111000000000000000000000000000000",
"7:111110111111000111000111111111111111000111000111",
"7:111111111111000111000111011111011111001110001100",
"7:111111001111000111001111111111111111001110001110",
"7:111100111100001100001100111111111111011100011100",
"7:111111111111000111000111000111111111001110001110",
"7:111110111110000011000011111111111111000110000110",
"7:111111111111000111011111111111001111001110001110",
"7:111111111111000011000111111111111111001110001110",
"8:111111111111100011110111111111111100111001011111",
"8:111111111111100111111110111111110011111011011111",
"8:011111011111111101110111111111111111011100011111",
"8:011110011111111011110111111111111000011001011111",
"8:001111011111111001111111111111111110001110001111",
"8:111111111111100111111110111111110111100001111111",
"8:011111111111110011111111111111111011110000111111",
"8:011111111111110111111111111111111001111111011111",
"8:111111111111111111111111111111111000111000111111",
"8:001001001001111111001111111000111100111110000111",
"8:111111110111111001001111111001110000111000111111",
"8:111111110111111111111111111111111011100011111111",
"8:011111111011111111111111110011111001111101011111",
"8:011111011111110011111111011110011111111011110011",
"8:111110111111111110111111111111110000110000111111",
"8:011111011111111111111111110000110000110000111111",
"8:111111111111110111111111111111111001100001111111",
"8:111100111110111110111100111111111111100011111111",
"8:111111111111110011100111111111110011110011111111",
"8:111100111110100110111110111111111111110111111111",
"8:111111111111000111111110111110111111100111111110",
"8:011111111111111001111111111111111101111101111111",
"8:111110111110100111110111111111110111110001111111",
"9:011111111111110011111111111111000011000011000111",
"9:001111111111111011111111001111000011000010000010",
"9:001111001111111001110011000111000001000001000001",
"9:001111001111111001110111111100000001000001000001",
"9:001111111001111011111111001111000001000001000001",
"9:001111001111111001110111111111000011000001000010",
"9:001111001111111001111011111111001101000011000011",
"9:011111111111111111111111111011000011000011000111",
"9:001111001011110011110011111111000011000011000010",
"9:011111011111100111111111110011000011000011000011",
"9:001111001111110001001111000001000001000001000001",
"9:000111001101001001001011111111001101000001000001",
"9:001111111111110000110000111111000000000000000000",
"9:001111110111000111110111111001000001000001000001",
"9:001111001100110011110000111111000000000000000000",
"9:001111111011111001110011111111111111000001000001",
"9:111111111111111111111111111111000111000111000111",
"9:111111111001110011111111111111111011000111000011",
"9:001111111111111001111111111111000011000011000011",
"9:111110111110110111100111111111111111000011000011",
"9:001111001111110001111111001001000001000011000011",
"9:111111111111110011110111111111000111000111000111",


"0:111110111111100011100011000011000011100111111110",
"0:111111111011100001100001100011100111100111111110",
"0:111111111111100011100011100011100011100111111111",
"0:011111111111111001110001110011110011110111111111",
"0:111111111111100011100111000111001111111111111110",
"0:111111111111110011100011000011000011100111111111",
"0:011111111111110000110001110001100011111111111111",
"0:111111111111110001100001100001100001100111111111",
"1:111111111111111111111111111111111111111111111111",
"1:001111001111001111001111001111001111111111111111",
"1:000111000111111111111111111111111111111111111111",
"1:111111111111111111111111111111111111111111111111",
"1:001111111111111111111111111100111100111100111100",
"1:111111111111111111000111000111000111000111000111",
"1:000111000111000111000111000111111111111111111111",
"2:111111111111111001000001000111000111001110111111",
"2:111111111011000011000111001110111100111000111111",
"2:111110111110011110111100111100111000110000111111",
"2:111111110111001111011111111100111000111000111111",
"2:111111111111110011000111001110111100111111111111",
"2:111111111111111111111111111110111100111101111111",
"2:111110111111001111011110111100111000110000111111",
"2:111111111111110111001111111110111100111001111111",
"2:111111111111110111001111011111111110111111111111",
"3:111110111110011110111111111111000111001111111111",
"4:111011111011111011111111111111111111000011000111",
"4:111111111111111111111111111111000111000111000111",
"4:111001111001111011111111111111000011000111000111",
"4:111001111001111011111011111111011111000111000111",
"4:110111110111110111111111111111001111001111001111",
"4:100111100111101111111111111111001111001110011110",
"4:111011111011110111111111111111000111000111001111",
"4:110111110111101111111111111110111110011110011110",
"4:001100111101111001111111111111000111000111000110",
"4:111011111111111111111111111111001110001110011110",
"4:111011111111110111111111111111000111001111001111",
"5:111111111111110000111111111111000001000001110111",
"5:111111111111110000111111111111000111000111011111",
"5:111111111111110000111111001111000001000111111111",
"5:111110111110110000111110111111000011000011001111",
"5:111111111111110000111111111111000111001111111111",
"5:111111111110100000111110111111000111001111111111",
"5:111111111111111111111111111111000001000011111111",
"5:111111111111110000111100111111011111000111111111",
"5:111111111111111100111111011111000011000111111111",
"5:111111111000111100111111111111000111000111111111",
"6:011111111111111000100000011111111111111111111111",
"6:011111111111111000110000111110111111111111111110",
"7:111111111111000111011111111111001110011110011100",
"7:111111011011000111111111111111000111000111001111",
"7:111111111111000111001111111111001111001111001111",
"7:111111111111000111000111111111101110011110011100",
"7:111110111110001110011110111111011100111000111100",
"7:111100111100011100011111111111111111111000111000",
"7:111110111110111111111111111100111100111100111100",
"7:111111111111000111000111111111111111001110001110",
"7:111111111111000111000111111111001111001110001110",
"7:111110111110011110111111111111111000111000111000",
"7:111111111111000111000111111111111111001110011110",
"8:111111111011111111111111111110111111101110111110",
"8:111111111111111111111110111110111110111110111100",
"8:111111111111111111011111111111111111100111111111",
"9:111111111101111111111111000011000011000011000011",
"9:111111110111111111111111111111001110001110011110",


  	
  	  //"A:001100001100011110011110010010010011100001100001",
      //"B:111110100011100011101110111111100001100011111110",
      //"C:001111011000110000100000100000100000100000111111",
      //"D:111110110011010001010001010001010001110011111110",
      //"D:111111100001100001100001100001100001100010111100",
      // "E:111111100000100000111111100000100000100000111111",
      //"F:111111100000100000100000111110100000100000100000",
      //"G:011110110000100000111111100101100101100101111101",
      //"H:100001100001100001111111100001100001100001100001",
      //"I:111111000100000100000100000100000100000100111111",
      //"J:111111000100000100000100000100000100101100111000",
      //"K:100011100110111100111100100010100011100001100001",
      //"L:100000100000100000100000100000100000100000111111",
      //"M:110011111111101101100101100001100001100001100001",
      //"N:100001110001111001101101100101100111100011100001",
      //"O:011110110011100001100001100011100011110010011110",
      //"P:111111100001100001100111111100100000100000100000",
      //"Q:011110110011100001100001100001100001111111111111",
      //"R:111111100001100011100110111111100001100001100001",
      //"S:011111110000100000110000011111000001000001111111",
      //"T:111111000100000100000100000100000100000100000100",
      //"U:100001100001100001100001100001100001100001111111",
      //"V:100001110001010011010010011010001110001100000100",
      //"W:100001100001110001110001010101011111011011011011",
      //"X:100001110011010110001100001100010110110011100001",
      //"Y:100001110010011110001000001000001000001000001000",//FOR KEYBOARD Y
      //"Y:100001110010011110001100001100001000010000100000",
      //"Z:111111000011000110001100001000011000110000111111"
      
  	  

      };
  	
  	public RecogChar(){
  		super("Kohenon Neuran Network Implementation");
  	}
	String messag;
  	public void init()	// Setup the GUI
  	{
  		looks = UIManager.getInstalledLookAndFeels();
  		
  		changeTheLookAndFeel( 2 ); 
  		preload();
    	updateList();

    	setLayout(new GridLayout(2, 1));

    	JPanel topPanel = new JPanel();
    	JPanel bottomPanel = new JPanel();

    	// create top button panel
    	JPanel topButtonPanel = new JPanel();
    	JPanel bottomButtonPanel = new JPanel();

    	//topButtonPanel.setLayout(new GridLayout(3, 1));

    	topButtonPanel.add(recognize = new JButton("Recognize"), BorderLayout.SOUTH);
    	//	topButtonPanel.add(clear = new JButton("Clear"));

    	JPanel addPanel = new JPanel();
    	addPanel.setLayout(new GridLayout(1, 2));
    	//addPanel.add(add = new JButton("Add:"));
    	addPanel.add(letterToAdd);
    	topButtonPanel.add(addPanel);
    	letterToAdd.setText("");

    	// create the bottom button pannel
    	bottomButtonPanel.setLayout(new GridLayout(3,1));
    	bottomButtonPanel.add(del = new JButton("Delete"),BorderLayout.NORTH);
    	bottomButtonPanel.add(delAll = new JButton("Delete All"),BorderLayout.SOUTH);
    	bottomButtonPanel.add(train = new JButton("Train"),BorderLayout.SOUTH);

    	// create top panel
    	entry = new DrawLetters();
    	topPanel.setLayout(new BorderLayout());
    	topPanel.add(message = new JLabel("Draw a letter, click Recognize"),BorderLayout.NORTH);
    	topPanel.add(entry, BorderLayout.CENTER);
    	topPanel.add(topButtonPanel, BorderLayout.EAST);
		message.setForeground(Color.BLUE);
		
		/*JPanel bottomButtonSidePanel = new JPanel();
		 bottomButtonSidePanel.setLayout(new GridLayout(1, 2));*/


		
    	// create bottom panel
    	bottomPanel.setLayout(new BorderLayout());
    	bottomPanel.add(message1=new JLabel("***************************************Known Letter Database**********************************************************************************"), BorderLayout.NORTH);
		message1.setForeground(Color.white);

    	JPanel bottomContent = new JPanel();
    	bottomContent.setLayout(new GridLayout(1, 2));
    	bottomPanel.add(bottomContent, BorderLayout.CENTER);
    	bottomPanel.add(bottomButtonPanel, BorderLayout.WEST); 

    	// create the letters panel
    	JPanel lettersPanel = new JPanel();
    	//scrollPane1.add(letters);
    	lettersPanel.setLayout(new BorderLayout());
    	lettersPanel.add(letters, BorderLayout.CENTER);

    	// create the downsample panel or the train set matrix of 5*7
    	JPanel downSamplePanel = new JPanel();
    	downSamplePanel.setLayout(new BorderLayout());
    	sample = new Sample(DOWNSAMPLE_WIDTH, DOWNSAMPLE_HEIGHT);
    	entry.setSample(sample);
    	downSamplePanel.add(sample, BorderLayout.CENTER);
    	
    	
    	JPanel panel1=new JPanel();
    	panel1.setLayout(new GridLayout(1,2));
    	panel1.add(bottomButtonPanel);
    	panel1.add(lettersPanel);

    	//bottomContent.add(lettersPanel);
    	bottomContent.add(panel1);
    	bottomContent.add(downSamplePanel);

    	add(topPanel);
    	//add(bottomPanel);
    	
        	

    	Font dialogFont = new Font("TimesNewRoman", Font.BOLD, 12);
    	clear.setFont(dialogFont);
    	add.setFont(dialogFont);
    	del.setFont(dialogFont);
    	delAll.setFont(dialogFont);
    	recognize.setFont(dialogFont);
    	train.setFont(dialogFont);

    	SymAction lSymAction = new SymAction();
    	clear.addActionListener(lSymAction);
    	add.addActionListener(lSymAction);
    	del.addActionListener(lSymAction);
    	delAll.addActionListener(lSymAction);
    	SymListSelection lSymListSelection = new SymListSelection();
    	letters.addItemListener(lSymListSelection);

    	train.addActionListener(lSymAction);
    	recognize.addActionListener(lSymAction);

    	//message1.setForeground(Color.BLUE);

    	entry.requestFocus();
    	//setSize(500,500);
    	resize(1270,680);
  	}
  	JButton add = new JButton();
  	JButton clear = new JButton();
  	JButton recognize = new JButton();

  	JScrollPane scrollPane1 = new JScrollPane();
  	java.awt.List letters = new java.awt.List();	//The letters list box
  	//JList letters=new JList();
  	JButton del = new JButton();
  	JButton delAll = new JButton();
  	JButton train = new JButton();

  	JLabel message = new JLabel();
	JLabel message1 = new JLabel();

  	JTextField letterToAdd = new JTextField("", 1);

  	class SymAction implements java.awt.event.ActionListener
  	{
		public void actionPerformed(java.awt.event.ActionEvent event)
  	  	{
    		Object object = event.getSource();
      		if (object == clear)
      		  	clear_actionPerformed(event);
      		else if (object == add)
      			add_actionPerformed(event);
      		else if (object == del)
        		del_actionPerformed(event);
      		else if (object == delAll)
        		deleteAll_actionPerformed(event);
      		else if (object == train)
        		train_actionPerformed(event);
      		//else if (object == recognize)
        	//	recognize_actionPerformedDNI(event);
    	}
  	}

  	/* Called to clear the image.*/
  	void clear_actionPerformed(java.awt.event.ActionEvent event)
  	{
  	  	entry.clear();
  	  	sample.getData().clear();
    	sample.repaint();
  	}

  	/* Called to clear the image.*/
  	void deleteAll_actionPerformed(java.awt.event.ActionEvent event)
  	{
  	  	sampleList.removeAllElements();
  	  	net = null;
    	updateList();
    	entry.clear();
    	sample.getData().clear();
    	sample.repaint();
  	}

  	/* Called to add the current image to the training set.*/
  	void add_actionPerformed(java.awt.event.ActionEvent event)
  	{
  		
  		
  		int i;
    	String letter = letterToAdd.getText().trim();
    	if (letter.length() > 1 || letter.length()==0)
    	{
			messag="You should enter a single character";
			javax.swing.JOptionPane.showMessageDialog(null,messag,"Warning",javax.swing.JOptionPane.WARNING_MESSAGE );
      		//message.setText("Enter within 1 letter");
      		return;
    	}

    	if (letter.length() < 1)
    	{
			messag="Enter a single character";
			javax.swing.JOptionPane.showMessageDialog(null,messag,"Warning",javax.swing.JOptionPane.WARNING_MESSAGE);
      		//message.setText("Enter a letter to add.");
      		return;
    	}

    	entry.downSample();
    	SampleData sampleData = (SampleData) sample.getData().clone();
    	sampleData.setLetter(letter.charAt(0));
    	//sampleData.setLetter(letter.substring(0,1));

    	for (i = 0; i < sampleList.size(); i++)
    	{
      		SampleData str = (SampleData) sampleList.elementAt(i);
      		if (str.equals(sampleData))
      		{
				messag="Letter already defined, delete it first!";
				javax.swing.JOptionPane.showMessageDialog(null,messag,"Warning",javax.swing.JOptionPane.WARNING_MESSAGE);
	      		//message.setText("Letter already defined, delete it first!");
	        	return;
      		}

      		if (str.compareTo(sampleData) > 0)
      		{
      			//System.out.println(i);
        		sampleList.insertElementAt(sampleData, i);
        		updateList();
        		return;
      		}
    	}
    	sampleList.insertElementAt(sampleData, sampleList.size());
    	updateList();
    	letters.select(i);
    	entry.clear();
    	sample.repaint();

  	}

  	/* Called when the del button is pressed.
  	   event=The event.
   	*/
  	void del_actionPerformed(java.awt.event.ActionEvent event)
  	{
    	int i = letters.getSelectedIndex();

    	if (i == -1)
    	{
			messag="Please select a letter to delete.";
			javax.swing.JOptionPane.showMessageDialog(null,messag,"Warning",javax.swing.JOptionPane.WARNING_MESSAGE);
      		//message.setText("Please select a letter to delete.");

      		return;
    	}

    	sampleList.removeElementAt(i);
    	updateList();
  	}

  	class SymListSelection implements ItemListener
  	{
    	public void itemStateChanged(ItemEvent event)
    	{
      		Object object = event.getSource();
      		if (object == letters)
        		letters_valueChanged(event);

    	}
  	}

  	/* Called when a letter is selected from the list box.
     event=The event
  	 */
  	void letters_valueChanged(ItemEvent event)
  	{
    	if (letters.getSelectedIndex() == -1)
      		return;
    	SampleData selected = (SampleData) sampleList.elementAt(letters.getSelectedIndex());
    	sample.setData((SampleData) selected.clone());
    	//sample.setData( selected);
    	sample.repaint();
    	entry.clear();
  	}

  	/* Called when the train button is pressed.
     event=The event.
   	*/
  	void train_actionPerformed(java.awt.event.ActionEvent event)
  	{
  		
  		
		try
    	{
      		int in = RecogChar.DOWNSAMPLE_HEIGHT * RecogChar.DOWNSAMPLE_WIDTH;
      		int out = sampleList.size();

      		TrainingSet set = new TrainingSet(in, out);
      		set.setTrainingSetCount(sampleList.size());

      		for (int t = 0; t < sampleList.size(); t++)
      		{
        		int idx = 0;
        		SampleData ds = (SampleData) sampleList.elementAt(t);
        		for (int y = 0; y < ds.getHeight(); y++)
        		{
          			for (int x = 0; x < ds.getWidth(); x++)
          			{
            			set.setInput(t, idx++, ds.getData(x, y) ? .5 : -.5);
          			}
        		}
      		}

      		net = new Kalgo(in, out, this);
      		net.setTrainingSet(set);
      		net.learn();
      		this.clear_actionPerformed(null);
      		messag="Trained...\n Ready to recognize.";
      		javax.swing.JOptionPane.showMessageDialog(null,messag,"output",javax.swing.JOptionPane.INFORMATION_MESSAGE);
      		//message.setText("Trained. Ready to recognize.");
    	}
    	catch (Exception e)
    	{
     		//messag="Exception:";
			//javax.swing.JOptionPane.showMessageDialog(null,messag,"output",javax.swing.JOptionPane.INFORMATION_MESSAGE);
      		message.setText("Exception:" + e.getMessage());
    	}

  	}

  	/* Called when the recognize button is pressed.
     event=The event.
   */
  	
 
  	/* 
  	void recognize_actionPerformedDNI(java.awt.event.ActionEvent event) //funcional
  	{
  		
  		File kappa = new File("C:/temp/4.png");
  		BufferedImage imageFull = null; 
  		
  		try {
			 imageFull = ImageIO.read(kappa);
	  	
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
  	
  		//La imagen full la corto quedandome unicamente con los primero 100 x 50 pixeles
  		
  		Image imageDigit =  null;
  		
  		for (int i = 0 ; i < 8 ; i++) {
  			
  			imageDigit =  imageFull.getSubimage (50 * i, 0, 50, 100 ); 
  	  		
   	  		//BufferedImage buffered = (BufferedImage) imageFull;
  	  		
  	  		recognize_actionPerformed(imageDigit);
  			
  		}
  		
  	
  	}
    */
  	  	
 public int recognize_actionPerformed(Image image) // ESTE ES LLAMADA POR Gerardo's Report
  	{
  		
 
//    	File kappa = new File("C:/temp/4.png");
	//	try {
	//		Image image = ImageIO.read(kappa);
			entry.entryImage = image;
	//	} catch (IOException e) {
			// TODO Auto-generated catch block
//			e.printStackTrace();
	//	}
	
		
    if (net == null)
    	{
			messag="I need to be trained first!";
			javax.swing.JOptionPane.showMessageDialog(null,messag,"output",javax.swing.JOptionPane.WARNING_MESSAGE);
      		message.setText("I need to be trained first!");
      		return 0 ;
    	}
    	entry.downSample();

    	double input[] = new double[8 * 6];
    	int idx = 0;
    	SampleData ds = sample.getData();
    	for (int y = 0; y < ds.getHeight(); y++)
    	{
      		for (int x = 0; x < ds.getWidth(); x++)
      		{
        		input[idx++] = ds.getData(x, y) ? .5 : -.5;
      		}
    	}

    	double normfac[] = new double[1];
    	
    	int best = net.winner(input, normfac);
    	//map[best] = ds.getLetter(); //extra code in mapNeurons() starting from input declaration. map[sampleList.size]. 
    	char map[] = mapNeurons();
   // 	String messag;
    	
    	
    	/* if(map[best]>=97 && map[best]<=122)
		{
			messag="English Small letter : "+map[best];
			javax.swing.JOptionPane.showMessageDialog(null,messag,"output",javax.swing.JOptionPane.INFORMATION_MESSAGE);
		}
		else if(map[best]>=33 && map[best]<=47)
		{
			messag="Operands : "+map[best];
			javax.swing.JOptionPane.showMessageDialog(null,messag,"output",javax.swing.JOptionPane.INFORMATION_MESSAGE);
		}
		else if(map[best]>=65 && map[best]<=90)
		{
			messag="English Capital letter : "+map[best];
			javax.swing.JOptionPane.showMessageDialog(null,messag,"output",javax.swing.JOptionPane.INFORMATION_MESSAGE);
		}
		else if(map[best]>=48 && map[best]<=57)
		{
			messag="English Numerical : "+map[best];
			javax.swing.JOptionPane.showMessageDialog(null,messag,"output",javax.swing.JOptionPane.INFORMATION_MESSAGE);
		}
		else
		{
			messag="Special Character : "+map[best];
			javax.swing.JOptionPane.showMessageDialog(null,messag,"output",javax.swing.JOptionPane.INFORMATION_MESSAGE);
		}

*/ 
    	
    
    	return  Character.getNumericValue( map[best]); // redirijo la salida a consola !!
    	
//	clear_actionPerformed(null);
	
	

  	}
  	
  	
  	
  	
  /* Used to map neurons to actual letters.
     return The current mapping between neurons and letters as an array.
   */
  	char[] mapNeurons()
  	{
	    char map[] = new char[sampleList.size()];
    	double normfac[] = new double[1];
    	
    	for (int i = 0; i < map.length; i++)
      		map[i] = '?';
    	for (int i = 0; i < sampleList.size(); i++)
    	{
      		double input[] = new double[8 * 6];
      		int idx = 0;
      		SampleData ds = (SampleData) sampleList.elementAt(i);
      		for (int y = 0; y < ds.getHeight(); y++)
      		{
        		for (int x = 0; x < ds.getWidth(); x++)
        		{
          			input[idx++] = ds.getData(x, y) ? .5 : -.5;
        		}
      		}

      		int best = net.winner(input, normfac);
      		map[best] = ds.getLetter();
    	}
    	return map;
  	}

  	/*this updateList fn gets d char from sampleList (from preload) and displays it in the list onto d screen. also stores chars in 
  	 * letters (java.awt.List)*/
  	public void updateList()
  	{//System.out.println("in updatelist");
    	letters.removeAll();
    	for (int i = 0; i < sampleList.size(); i++)
    	{
      		SampleData sample = (SampleData) sampleList.elementAt(i);
      		//System.out.println("sample="+sample);
      		letters.add("" + sample.letter); 
    	}

  	}
  	
/*this preload fn maps d letter  and d grid values (sampleData) and loads. also stores d char in sampleList (vector)*/
  	public void preload()
  	{
  		//System.out.println("in preload");
    	int index = 0;
    	//System.out.println("RecogChar.HANDWRITING.length="+RecogChar.HANDWRITING.length);
    	for (int i = 0; i < RecogChar.HANDWRITING.length; i++)
    	{
      		String line = HANDWRITING[i].trim();
      		//System.out.println("line="+line);
      		SampleData ds = new SampleData(line.charAt(0),RecogChar.DOWNSAMPLE_WIDTH, RecogChar.DOWNSAMPLE_HEIGHT);
      		sampleList.insertElementAt(ds, index++);
      		int idx = 2;
      		for (int y = 0; y < ds.getHeight(); y++)
      		{
        		for (int x = 0; x < ds.getWidth(); x++)
        		{
        	  		ds.setData(x, y, line.charAt(idx++) == '1');
        		}
      		}
    	}
    	train_actionPerformed(null);
  	}
  	
  	private void changeTheLookAndFeel( int value )
  	      {
  			//System.out.println("in changelook and feel");
  	         try // change look and feel
  	         {
  	           // set look and feel for this application                 
  	            UIManager.setLookAndFeel( looks[ value ].getClassName() );
  	        //  System.out.println("looks[2]="+looks[ value ].getClassName());
  	            // update components in this application     
  	            SwingUtilities.updateComponentTreeUI( this );
  	         } // end try
  	         catch ( Exception exception )
  	         {
  	            exception.printStackTrace();
  	         } // end catch
  	      } //
  	public static void main(String args[]){
  		RecogChar recogChar = new RecogChar();
  		recogChar.setVisible(true);
  		recogChar.init();
  		recogChar.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  		recogChar.setSize(820, 580);
  	}


	public void recognize_actionPerformedDNI(Image ruta) {
		// TODO Auto-generated method stub

  		//File kappa = new File(ruta);
  	//	BufferedImage imageFull = null; 
  		
  	//	try {
	//		 imageFull = ImageIO.read(kappa);
	  	
	//	} catch (IOException e) {
			// TODO Auto-generated catch block
	//		e.printStackTrace();
	//	}
  	
  		//La imagen full la corto quedandome unicamente con los primero 100 x 50 pixeles
  		
  		//Image imageDigit =  null;
  		
  		recognize_actionPerformed(ruta);
  		
  		
  		//for (int i = 0 ; i < 8 ; i++) {
  		
		
	 	//recognize_actionPerformed(ruta);
		
	//	for (int i = 0 ; i < 8 ; i++) {
  			
  			//imageDigit =  imageFull.getSubimage (50 * i, 0, 50, 100 ); 
  	//		imageDigit =  imageFull.getSubimage (50 * i, 0, 50, 100 ); 
  	  		
   	  		//BufferedImage buffered = (BufferedImage) imageFull;
  	  		
  	  	
  	//  	recognize_actionPerformed(imageDigit);
  			
  		//}
  	//	}
  		
	}
}